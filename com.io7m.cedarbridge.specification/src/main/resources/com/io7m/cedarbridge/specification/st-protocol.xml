<?xml version="1.0" encoding="UTF-8" ?>

<Section xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns="urn:com.io7m.structural:8:0"
         id="62659b04-0cc9-4e75-a396-bc6963442fb3"
         title="protocol">

  <Subsection title="Description">
    <Paragraph>
      <Term type="expression">protocol</Term>
      - Declare a protocol
    </Paragraph>
  </Subsection>

  <Subsection title="Overview">
    <Paragraph>
      The <Term type="statement">protocol</Term> statement declares a new protocol.
    </Paragraph>
  </Subsection>

  <Subsection title="Syntax" id="1f9b69fc-7b95-4007-8bd1-6715b07fd69a">
    <FormalItem title="Protocol Syntax">
      <Verbatim>
        <xi:include href="ebnf/007_protocol.ebnf"
                    parse="text"/>
      </Verbatim>
    </FormalItem>
  </Subsection>

  <Subsection title="Semantics" id="3db896a5-bad2-4b08-9154-b48943f6f5a3">
    <Paragraph>
      A <Term type="statement">protocol</Term> statement, if present, <Term type="term">MUST</Term> occur with
      a package set in the current <Link target="66b692d7-058e-4326-bdf6-a30a5f7aa5a9">schema context</Link>.
      In practical terms, this means that <Term type="statement">protocol</Term> statements <Term type="term">MUST</Term> appear
      <Term type="term">after</Term> the <Link target="e4b13719-3c30-404c-b729-f429724f90b7">package</Link> statement
      in a given compilation unit.
    </Paragraph>
    <Paragraph>
      The statement <Term type="expression">(protocol T ...)</Term> introduces a new <Term type="term">protocol
      name</Term> <Term type="expression">T</Term> within the current package in the schema context. Protocol names
      are unique within a package; it is an error for two or more <Term type="term">protocol declarations</Term> to
      name the same protocol.
    </Paragraph>
    <Paragraph id="404f0595-a150-4baf-b98b-37109250d8bd">
      A protocol statement declares a contiguous ordered set of <Term type="term">versions</Term>, with each
      <Term type="term">version</Term> naming a set of <Link target="6f6e50ac-83e9-4454-9329-149e8ca97cb8">types</Link>
      that are included within that version by nature of being added to or removed from the previous version.
      Accordingly, the intersections of the sets of types between versions are allowed to
      be non-empty. That is, for versions <Term type="expression">v</Term> and <Term type="expression">w</Term>,
      if <Term type="expression">P(v)</Term> is the set of types in version <Term type="expression">v</Term> and
      <Term type="expression">P(w)</Term> is the set of types in version <Term type="expression">w</Term>, then
      it is not an error if <Term type="expression">P(v) ∩ P(w) ≠ ∅</Term>.
    </Paragraph>
    <Paragraph>
      A <Term type="expression">(types-added ...)</Term> declaration adds a set of types to a protocol version
      relative to the previous version.
    </Paragraph>
    <Paragraph>
      A <Term type="expression">(types-removed ...)</Term> declaration removes a set of types from a protocol version
      relative to the previous version.
    </Paragraph>
    <Paragraph>
      A <Term type="expression">(types-removed-all)</Term> declaration is a convenient declaration that removes
      all types from a protocol version. It is equivalent to a <Term type="expression">(types-removed ...)</Term>
      declaration where the declaration names <Term type="term">all</Term> the types that are present in the previous
      version.
    </Paragraph>
    <Paragraph id="15d2bb7d-2dbc-4a0c-8a25-7003cb3f7e3a">
      Each type named in each protocol <Term type="term">version</Term> must have kind <Term type="expression">*</Term>.
    </Paragraph>
    <Paragraph>
      For each protocol version <Term type="expression">vc</Term>, additions and removals are processed as follows:
      Let <Term type="expression">tp</Term> be the set of types present in the version <Term type="expression">vp</Term>
      that is the version immediately previous to <Term type="expression">vc</Term>. If <Term type="expression">vc</Term>
      is the first version in the protocol, <Term type="expression">tp = ∅</Term>. All the types in all of the
      <Term type="expression">(types-added ...)</Term> declarations in <Term type="expression">vc</Term> are
      collected into the <Term type="term">addition</Term> set <Term type="expression">ta</Term>.
      All the types in all of the
      <Term type="expression">(types-removed ...)</Term> declarations in <Term type="expression">vc</Term> are
      collected into the <Term type="term">removal</Term> set <Term type="expression">tr</Term>.
      If a <Term type="expression">(types-removed-all)</Term> declaration is
      present, then <Term type="expression">tr = tp</Term>.
      Then, for each type <Term type="expression">r</Term> in <Term type="expression">tr</Term>,
      <Term type="expression">r</Term> is removed from
      <Term type="expression">tp</Term>.
      Then, for each type
      <Term type="expression">a</Term> in <Term type="expression">ta</Term>,
      <Term type="expression">a</Term> is added to <Term type="expression">tp</Term>. <Term type="expression">tp</Term>
      is now considered to be the set of types present in <Term type="expression">vc</Term>.
    </Paragraph>
    <Paragraph id="200ef52c-2863-468d-9056-45e29a6e93dc">
      It is an error if the set of types in a version is empty after all additions and removals have been
      processed.
    </Paragraph>
    <Paragraph id="7715beef-680d-4f29-b418-9f79e24c599b">
      It is an error if a type named by a <Term type="expression">(types-removed ...)</Term> declaration
      is not present in the protocol version prior to additions and removals being processed. That is, it is not
      valid to attempt to remove a type from a protocol version when that type is not present in the protocol
      version in the first place.
    </Paragraph>
    <Paragraph id="78e0481d-8da4-426f-bbce-cfba8f636f0d">
      It is an error if a type named by a <Term type="expression">(types-added ...)</Term> declaration
      is already present in the protocol version prior to additions and removals being processed. That is, it is not
      valid to attempt to redundantly add a type to a protocol version when that type is already present in the protocol
      version.
    </Paragraph>
    <Paragraph>
      The declaration order of <Term type="term">type</Term> additions and removals within a
      <Term type="term">version</Term> is
      NOT significant; changing the order of <Term type="statement">version</Term> declarations will not change the
      semantics or serialized form of the protocol as the declarations <Term type="term">MUST</Term> be reordered
      by the compiler into ascending lexicographical order of the type names.
    </Paragraph>
    <Paragraph id="0f1809c1-9828-497e-bb57-c3b40c82e051">
      The first <Term type="term">version</Term> in a protocol cannot have any
      <Term type="expression">(types-removed ...)</Term> declarations.
    </Paragraph>
    <Paragraph>
      The declaration order of <Term type="term">versions</Term> within a <Term type="term">protocol</Term> is
      NOT significant; changing the order of <Term type="statement">version</Term> declarations will not change the
      semantics or serialized form of the protocol as the declarations <Term type="term">MUST</Term> be reordered
      by the compiler into ascending order by their declared version number.
    </Paragraph>
  </Subsection>

  <Subsection title="Example">
    <Paragraph>
      The following statements declare a simple <Term type="term">Echo</Term> protocol with two versions:
    </Paragraph>
    <FormalItem title="Protocol Example">
      <Verbatim><![CDATA[
(import com.io7m.cedarbridge cb)

(record Hello
  [field name cb:String])

(record Hello2
  [field name cb:String]
  [field id   cb:IntegerUnsigned32])

(record Speak
  [field message cb:String])

(record Goodbye)

(protocol Echo
  [version 1
    [types-added Hello Speak Goodbye]]
  [version 2
    [types-removed Hello]
    [types-added Hello2]])
]]></Verbatim>
    </FormalItem>
    <Paragraph>
      The first version consists of types <Term type="expression">{ Hello, Speak, Goodbye }</Term> whilst the
      second version consists of types <Term type="expression">{ Hello2, Speak, Goodbye }</Term>.
    </Paragraph>
  </Subsection>
</Section>
